import streamlit as st
from tensorflow.keras.models import load_model
import numpy as np
from PIL import Image

# --- –°—Ç–∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.markdown("""
    <style>
        body {
            background: linear-gradient(to right, #eef2f3, #8e9eab);
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }

        @keyframes marquee {
            0% { transform: translateX(100%); }
            100% { transform: translateX(-100%); }
        }

        .marquee-container {
            width: 100%;
            overflow: hidden;
            background: #007BFF;
            padding: 10px 0;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .marquee-text {
            display: inline-block;
            white-space: nowrap;
            color: white;
            font-size: 18px;
            font-weight: bold;
            animation: marquee 10s linear infinite;
        }

        .main-container {
            background: white;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 2px 4px 10px rgba(0, 0, 0, 0.1);
            margin: 20px auto;
            width: 80%;  /* –ò–∑–º–µ–Ω–µ–Ω–æ —Å 80% –Ω–∞ 80% –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–∞—Ö */
            max-width: 1280px; /* –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ */
            text-align: center;
        }

        .stButton>button {
            background: #007BFF;
            color: white;
            font-size: 18px;
            padding: 12px 20px;
            border-radius: 8px;
            border: none;
            transition: 0.3s;
        }
        .stButton>button:hover {
            background: #0056b3;
            transform: scale(1.05);
        }

        .stFileUploader>div {
            border: 2px dashed #007BFF;
            padding: 15px;
            border-radius: 10px;
        }

        .stImage>img {
            border-radius: 10px;
            box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.2);
            max-width: 100%; /* –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */
            height: auto;
        }

        /* –î–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –∫–Ω–æ–ø–∫–∏ –∏ –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */
        .stButton {
            display: inline-block;
            margin-top: 20px;
        }
    </style>
""", unsafe_allow_html=True)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ---
@st.cache_resource
def load_trained_model():
    model = load_model('pneumonia_detection_cnn_model.keras')
    return model

model = load_trained_model()

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
st.markdown('<div class="marquee-container"><span class="marquee-text">üöÄ AI-Powered Pneumonia Detection - Upload Your X-Ray Now! üîç</span></div>', unsafe_allow_html=True)

st.markdown('<div class="main-container">', unsafe_allow_html=True)
st.title("üîç AI Pneumonia Diagnosis")
st.write("**Upload a chest X-ray, and our AI will detect pneumonia.**")

uploaded_file = st.file_uploader("üìÇ Upload an X-ray image", type=["png", "jpg", "jpeg"])

if uploaded_file:
    st.image(uploaded_file, caption="Uploaded Image", use_column_width=True)
    st.success("‚úÖ Image successfully uploaded!")

    if st.button("üîç Run Analysis"):
        with st.spinner("‚öôÔ∏è AI is analyzing the image..."):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            img = Image.open(uploaded_file).convert('RGB')
            img = img.resize((224, 224))  # –ü–æ–¥–≥–æ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
            img_array = np.array(img) / 255.0  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            img_array = np.expand_dims(img_array, axis=0)  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞

            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            prediction = model.predict(img_array)[0][0]
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            import time
            time.sleep(1)

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if prediction > 0.5:
            st.error(f"‚ùó Pneumonia detected with {prediction * 100:.2f}% probability.")
        else:
            st.success(f"‚úÖ No pneumonia detected. Probability: {(1 - prediction) * 100:.2f}%.")
            
st.markdown('</div>', unsafe_allow_html=True)